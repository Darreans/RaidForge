using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using BepInEx;
using RaidForge.Utils;

namespace RaidForge.Services
{
    public static class ShardVulnerabilityService
    {
        private static Dictionary<string, string> _vulnerableEntities = new();
        private static readonly object _saveLock = new();
        private static bool _dataLoaded = false;

        private static readonly string DataSubfolder = "Data";
        private static readonly string SaveFileName = "RaidForge_ShardVulnerability.csv";

        private static string GetSaveFilePath()
        {
            string dirPath = Path.Combine(Paths.ConfigPath, "RaidForge", DataSubfolder);
            Directory.CreateDirectory(dirPath);
            return Path.Combine(dirPath, SaveFileName);
        }

        public static void LoadStateFromDisk()
        {
            if (_dataLoaded) return;
            lock (_saveLock)
            {
                string filePath = GetSaveFilePath();
                _vulnerableEntities.Clear();

                if (!File.Exists(filePath))
                {
                    _dataLoaded = true;
                    return;
                }

                try
                {
                    var lines = File.ReadAllLines(filePath);
                    foreach (var line in lines.Skip(1))
                    {
                        if (string.IsNullOrWhiteSpace(line)) continue;

                        var parts = line.Split(',');
                        if (parts.Length >= 2)
                        {
                            var key = parts[0].Trim();
                            var name = parts[1].Trim();
                            if (!string.IsNullOrEmpty(key))
                            {
                                _vulnerableEntities[key] = name;
                            }
                        }
                    }
                }
                catch (Exception)
                {

                }
                finally
                {
                    _dataLoaded = true;
                }
            }
        }

        private static void SaveStateToDisk()
        {
            lock (_saveLock)
            {
                string filePath = GetSaveFilePath();
                try
                {
                    var sb = new StringBuilder();
                    sb.AppendLine("PersistentKey,ContextualName");

                    foreach (var entry in _vulnerableEntities)
                    {
                        sb.AppendLine($"{entry.Key},{entry.Value}");
                    }

                    File.WriteAllText(filePath, sb.ToString());
                }
                catch (Exception)
                {

                }
            }
        }

        public static void SetVulnerable(string persistentKey, string contextualName)
        {
            if (string.IsNullOrEmpty(persistentKey)) return;

            if (!_vulnerableEntities.ContainsKey(persistentKey))
            {
                _vulnerableEntities[persistentKey] = contextualName;
                SaveStateToDisk();
            }
            else
            {
                if (_vulnerableEntities[persistentKey] != contextualName)
                {
                    _vulnerableEntities[persistentKey] = contextualName;
                    SaveStateToDisk();
                }
            }
        }

        public static void SetNotVulnerable(string persistentKey, string contextualName)
        {
            if (string.IsNullOrEmpty(persistentKey)) return;

            if (_vulnerableEntities.Remove(persistentKey))
            {
                SaveStateToDisk();
            }
        }

        public static bool IsVulnerable(string persistentKey)
        {
            if (string.IsNullOrEmpty(persistentKey)) return false;
            return _vulnerableEntities.ContainsKey(persistentKey);
        }
    }
}